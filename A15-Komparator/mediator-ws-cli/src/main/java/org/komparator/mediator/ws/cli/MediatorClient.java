package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.io.File;
import java.io.FileNotFoundException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.xml.ws.BindingProvider;

// TODO uncomment after generate-sources
import org.komparator.mediator.ws.*;
import org.komparator.security.CryptoUtil;

import pt.ulisboa.tecnico.sdis.cert.CertUtil;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType{


// TODO uncomment after generate-sources
    // /** WS service */
     MediatorService service = null;

// TODO uncomment after generate-sources
    // /** WS port (port type is the interface, port is the implementation) */
     MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL
    private boolean testing = true;


    public String getWsURL() {
        return wsURL;
    }

    
    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }
    
    //cryptography stuffs
    private char[] keystorePassword = "7Nhx1rNT".toCharArray();
    private Key publicKey = null;
	private Certificate cert =null;
	private CryptoUtil cryptkeeper = null;

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */

    
    public MediatorClient(String wsURL) throws MediatorClientException {
    	if(cert==null)this.certificateSetup();
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
    	
    	if(cert==null)this.certificateSetup();
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }
    public MediatorPortType getPort (){return this.port;}

    private void certificateSetup(){
    	File certificateFile = new File("A15_Mediator.cer");
    	try {
    		this.cryptkeeper = new CryptoUtil();
			this.cert = CertUtil.getX509CertificateFromFile(certificateFile);
			this.publicKey = cert.getPublicKey();
		} catch (FileNotFoundException | CertificateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	if(testing)System.out.println("Certificate has been setup, public key is: " + publicKey);
    }
    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
// TODO uncomment after generate-sources
         service = new MediatorService();
         port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }


    // remote invocation methods ----------------------------------------------
    
    // TODO uncomment after generate-sources
    
     @Override
	 public void clear() {
		 port.clear();
	 }
     
     
     @Override
     public void updateCart(List<CartView> carts){
    	 port.updateCart(carts);
    	 
     }
     @Override
     public void updateShoppingHistory(List<ShoppingResultView> history){
    	 port.updateShoppingHistory(history);
    	 
     }
 	@Override
 	public void goPrimary() {
 		 port.goPrimary();
 		// TODO Auto-generated method stub
 		
 	}
 	
 	
     @Override 
     public void imAlive() {
    	 //System.out.println("Applying ImAlive on stub\n");
		 port.imAlive();
    	// System.out.println("Applied ImAlive on stub\n");

	 }

    @Override
	 public String ping(String arg0) {
		 return port.ping(arg0);
	 }

     @Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
		 return port.searchItems(descText);
	 }

     @Override
	public List<CartView> listCarts() {
		 return port.listCarts();
	 }

	 @Override
	 public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
		 return port.getItems(productId);
	 }

	 @Override
	 public ShoppingResultView buyCart(String cartId, String creditCardNr)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
		 	try {
				String cipheredCreditCardNr = this.cryptkeeper.asymCipherString(creditCardNr.getBytes(), this.publicKey); 
				return port.buyCart(cartId, cipheredCreditCardNr);
			} catch (InvalidKeyException | NoSuchPaddingException | NoSuchAlgorithmException | IllegalBlockSizeException
					| BadPaddingException e) {

				throw new InvalidCreditCard_Exception(creditCardNr, null);
			}
		 			
	 }

	 @Override
	 public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		 port.addToCart(cartId, itemId, itemQty);
	 }

	 @Override
	 public List<ShoppingResultView> shopHistory() {
		 return port.shopHistory();
	 }



 
}